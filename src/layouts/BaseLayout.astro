---
import { siteConfig } from '../../astro.config.mjs';
import '../styles/global.css';
import '../styles/code.css';

export interface Props {
  title?: string;
  description?: string;
  image?: string;
  article?: boolean;
  layout?: 'default' | 'docs' | 'simple';
}

const {
  title = siteConfig.title,
  description = siteConfig.description,
  image = '/og-image.jpg',
  article = false,
  layout = 'default'
} = Astro.props;

const canonicalURL = new URL(Astro.url.pathname, Astro.site);
const socialImageURL = new URL(image, Astro.url).href;
---

<!DOCTYPE html>
<html lang="en" data-theme="light">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    
    <!-- Canonical URL -->
    <link rel="canonical" href={canonicalURL} />
    
    <!-- Primary Meta Tags -->
    <title>{title}</title>
    <meta name="title" content={title} />
    <meta name="description" content={description} />
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content={article ? "article" : "website"} />
    <meta property="og:url" content={Astro.url} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={socialImageURL} />
    
    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={Astro.url} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={socialImageURL} />
    
    <!-- Sitemap -->
    <link rel="sitemap" href="/sitemap-index.xml" />
    
    <!-- Preload critical fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link href="https://fonts.googleapis.com/css2?family=Barlow:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap" rel="stylesheet" />
    
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" integrity="sha512-iecdLmaskl7CVkqkXNQ/ZH/XLlvWZOJyj7Yy7tcenmpD1ypASozpmT/E0iPtmFIB46ZmdtAc9eNBvH0H/ZpiBw==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    
    <!-- Theme Script (inline to prevent FOUC) -->
    <script is:inline>
      // Theme initialization
      const getThemePreference = () => {
        if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
          return localStorage.getItem('theme');
        }
        return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
      };
      
      const isDark = getThemePreference() === 'dark';
      document.documentElement.setAttribute('data-theme', isDark ? 'dark' : 'light');
      
      if (typeof localStorage !== 'undefined') {
        localStorage.setItem('theme', isDark ? 'dark' : 'light');
      }
    </script>
  </head>
  
  <body>
    <!-- Skip links for keyboard users -->
    <a href="#main-content" class="skip-link">Skip to main content</a>
    <a href="#sidebar" class="skip-link">Skip to navigation</a>
    
    <div class={`app-layout app-layout--${layout}`}>
      <!-- Global ARIA live regions for announcements -->
      <div id="live-region-polite" aria-live="polite" aria-atomic="false" class="sr-only"></div>
      <div id="live-region-assertive" aria-live="assertive" aria-atomic="false" class="sr-only"></div>
      <div id="live-region-status" role="status" aria-live="polite" class="sr-only"></div>
      
      <slot />
    </div>
    
    <!-- Live region announcement utility -->
    <script>
      // Global utility for accessible announcements
      window.announceToScreenReader = function(message, priority = 'polite') {
        const liveRegions = {
          polite: document.getElementById('live-region-polite'),
          assertive: document.getElementById('live-region-assertive'),
          status: document.getElementById('live-region-status')
        };
        
        const region = liveRegions[priority] || liveRegions.polite;
        
        if (region) {
          // Clear previous message
          region.textContent = '';
          
          // Set new message after a brief delay to ensure screen readers notice
          setTimeout(() => {
            region.textContent = message;
          }, 100);
          
          // Clear message after 5 seconds to prevent clutter
          setTimeout(() => {
            if (region.textContent === message) {
              region.textContent = '';
            }
          }, 5000);
        }
      };
      
      // Utility for status updates (like loading, success, error)
      window.announceStatus = function(message) {
        window.announceToScreenReader(message, 'status');
      };
      
      // Utility for urgent notifications
      window.announceUrgent = function(message) {
        window.announceToScreenReader(message, 'assertive');
      };
      
      // Utility for checking reduced motion preference
      window.prefersReducedMotion = function() {
        return window.matchMedia && window.matchMedia('(prefers-reduced-motion: reduce)').matches;
      };
      
      // Utility for respectful animations
      window.respectfulAnimate = function(element, keyframes, options = {}) {
        if (window.prefersReducedMotion()) {
          // Skip animation, just apply final state
          return Promise.resolve();
        }
        
        // Perform animation normally
        if (element.animate) {
          return element.animate(keyframes, options);
        }
        return Promise.resolve();
      };
    </script>
    
    <!-- Theme toggle script -->
    <script>
      document.addEventListener('DOMContentLoaded', () => {
        const themeToggle = document.getElementById('theme-toggle');
        if (themeToggle) {
          themeToggle.addEventListener('click', () => {
            const currentTheme = document.documentElement.getAttribute('data-theme');
            const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
            
            document.documentElement.setAttribute('data-theme', newTheme);
            localStorage.setItem('theme', newTheme);
            
            // Update button icon
            const icon = themeToggle.querySelector('i');
            if (icon) {
              icon.className = newTheme === 'dark' ? 'fas fa-sun' : 'fas fa-moon';
            }
            
            // Announce theme change to screen readers
            const themeLabel = newTheme === 'dark' ? 'dark mode' : 'light mode';
            if (window.announceStatus) {
              window.announceStatus(`Switched to ${themeLabel}`);
            }
          });
        }
      });
    </script>
    
    <!-- Mobile menu script -->
    <script>
      document.addEventListener('DOMContentLoaded', () => {
        const mobileMenuToggle = document.getElementById('mobile-menu-toggle');
        const sidebar = document.getElementById('sidebar');
        const overlay = document.getElementById('sidebar-overlay');
        
        if (mobileMenuToggle && sidebar) {
          mobileMenuToggle.addEventListener('click', () => {
            const isOpen = sidebar.classList.contains('sidebar--open');
            
            if (isOpen) {
              // Closing sidebar
              sidebar.classList.remove('sidebar--open');
              document.body.classList.remove('sidebar-open');
              mobileMenuToggle.setAttribute('aria-expanded', 'false');
              mobileMenuToggle.setAttribute('aria-label', 'Open navigation menu');
              mobileMenuToggle.focus();
              
              // Announce menu closure
              if (window.announceStatus) {
                window.announceStatus('Navigation menu closed');
              }
            } else {
              // Opening sidebar
              sidebar.classList.add('sidebar--open');
              document.body.classList.add('sidebar-open');
              mobileMenuToggle.setAttribute('aria-expanded', 'true');
              mobileMenuToggle.setAttribute('aria-label', 'Close navigation menu');
              
              // Focus first link in sidebar for keyboard users
              const firstLink = sidebar.querySelector('.sidebar__link');
              if (firstLink) {
                firstLink.focus();
              }
              
              // Announce menu state change
              if (window.announceStatus) {
                window.announceStatus('Navigation menu opened');
              }
            }
          });
        }
        
        if (overlay) {
          overlay.addEventListener('click', () => {
            sidebar?.classList.remove('sidebar--open');
            document.body.classList.remove('sidebar-open');
            if (mobileMenuToggle) {
              mobileMenuToggle.setAttribute('aria-expanded', 'false');
              mobileMenuToggle.setAttribute('aria-label', 'Open navigation menu');
              mobileMenuToggle.focus();
              
              // Announce menu closure
              if (window.announceStatus) {
                window.announceStatus('Navigation menu closed');
              }
            }
          });
        }
        
        // Close sidebar on escape key
        document.addEventListener('keydown', (e) => {
          if (e.key === 'Escape' && sidebar?.classList.contains('sidebar--open')) {
            sidebar.classList.remove('sidebar--open');
            document.body.classList.remove('sidebar-open');
            if (mobileMenuToggle) {
              mobileMenuToggle.setAttribute('aria-expanded', 'false');
              mobileMenuToggle.setAttribute('aria-label', 'Open navigation menu');
              mobileMenuToggle.focus();
              
              // Announce menu closure
              if (window.announceStatus) {
                window.announceStatus('Navigation menu closed');
              }
            }
          }
        });
        
        // Add touch support for swipe to close
        let touchStartX = 0;
        let touchEndX = 0;
        
        document.addEventListener('touchstart', (e) => {
          if (sidebar?.classList.contains('sidebar--open')) {
            touchStartX = e.changedTouches[0].screenX;
          }
        });
        
        document.addEventListener('touchend', (e) => {
          if (sidebar?.classList.contains('sidebar--open')) {
            touchEndX = e.changedTouches[0].screenX;
            // Swipe left to close (threshold of 50px)
            if (touchStartX - touchEndX > 50) {
              sidebar.classList.remove('sidebar--open');
              document.body.classList.remove('sidebar-open');
              if (mobileMenuToggle) {
                mobileMenuToggle.setAttribute('aria-expanded', 'false');
                mobileMenuToggle.setAttribute('aria-label', 'Open navigation menu');
                mobileMenuToggle.focus();
              }
            }
          }
        });
      });
    </script>
    
    <!-- External link enhancement script -->
    <script>
      document.addEventListener('DOMContentLoaded', () => {
        // Enhance external links with accessibility attributes
        const links = document.querySelectorAll('a[href]');
        const currentDomain = window.location.hostname;
        
        links.forEach(link => {
          const href = link.getAttribute('href');
          
          // Skip if not an external link
          if (!href || href.startsWith('#') || href.startsWith('/') || href.startsWith('mailto:') || href.startsWith('tel:')) {
            return;
          }
          
          // Check if it's an external domain
          try {
            const url = new URL(href, window.location);
            const isExternal = url.hostname !== currentDomain;
            
            if (isExternal) {
              // Add target="_blank" if not already present
              if (!link.hasAttribute('target')) {
                link.setAttribute('target', '_blank');
              }
              
              // Add rel="noopener noreferrer" if not already present
              if (!link.hasAttribute('rel')) {
                link.setAttribute('rel', 'noopener noreferrer');
              } else {
                const rel = link.getAttribute('rel');
                if (!rel.includes('noopener')) {
                  link.setAttribute('rel', rel + ' noopener');
                }
                if (!rel.includes('noreferrer')) {
                  link.setAttribute('rel', link.getAttribute('rel') + ' noreferrer');
                }
              }
              
              // Enhance aria-label if not already descriptive
              const existingLabel = link.getAttribute('aria-label');
              if (!existingLabel || !existingLabel.includes('new tab')) {
                const linkText = link.textContent?.trim() || 'external link';
                link.setAttribute('aria-label', `${linkText} (opens in new tab)`);
              }
            }
          } catch (e) {
            // Invalid URL, skip
          }
        });
      });
    </script>
    
    <!-- Code block enhancements -->
    <script src="/code-blocks.js" is:inline></script>
  </body>
</html>

<style>
  /* Skip links for keyboard accessibility */
  .skip-link {
    position: absolute;
    top: -40px;
    left: 6px;
    background: var(--color-accent);
    color: white;
    padding: 8px;
    text-decoration: none;
    border-radius: 4px;
    z-index: 1000;
    font-weight: 600;
    transition: top 0.2s ease;
  }
  
  .skip-link:focus {
    top: 6px;
  }
  
  .app-layout {
    min-height: 100vh;
  }
  
  /* Default layout - simple single column */
  .app-layout--default,
  .app-layout--simple {
    display: flex;
    flex-direction: column;
  }
  
  /* Docs layout - Large screens: three columns (sidebar + main + toc) */
  .app-layout--docs {
    display: grid;
    grid-template-areas: 
      "header header header"
      "sidebar main toc"
      "footer footer footer";
    grid-template-columns: var(--sidebar-width) 1fr var(--toc-width);
    grid-template-rows: var(--header-height) 1fr auto;
  }
  
  /* Medium screens: two columns (sidebar + main), TOC becomes dropdown in main */
  @media (max-width: 1200px) and (min-width: 768px) {
    .app-layout--docs {
      grid-template-areas: 
        "header header"
        "sidebar main"
        "footer footer";
      grid-template-columns: var(--sidebar-width) 1fr;
    }
  }
  
  /* Small screens: single column, sidebar becomes hamburger menu */
  @media (max-width: 767px) {
    .app-layout--docs {
      grid-template-areas: 
        "header"
        "main"
        "footer";
      grid-template-columns: 1fr;
    }
  }
  
  /* Prevent body scroll when mobile sidebar is open */
  body.sidebar-open {
    overflow: hidden;
  }
</style>